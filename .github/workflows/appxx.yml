name: Build rootfs and Appx and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '24 7 1 * *'

jobs:
  build-rootfs:
    name: Build Zenora RootFS
    runs-on: ubuntu-latest
    container:
      image: archlinux/archlinux
      options: --privileged

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare container
        run: |
          pacman-key --init
          pacman-key --populate
          echo -e "\n[zrepo]\nSigLevel = Never\nServer = https://codeberg.org/zenoralinux/zenora-repo/media/branch/main/\$arch" >> /etc/pacman.conf
          pacman -Sy --noconfirm archlinux-keyring
          pacman -Syu --noconfirm
          pacman -S --noconfirm arch-install-scripts wget curl base-devel zip unzip zsh shadow

      - name: Build rootfs
        run: |
          mkdir /mnt/sys-root-skeleton /mnt/sys-root
          mount --bind /mnt/sys-root-skeleton /mnt/sys-root
          wget -O target-pacman.conf https://raw.githubusercontent.com/zenoralinux/wsl-zenora-rootfs/main/pacman.conf

          pacstrap -G -M -C target-pacman.conf -K /mnt/sys-root base curl wget vim nano sudo texinfo man-db man-pages zsh shadow

          sed -i 's/^#Server/Server/' /mnt/sys-root/etc/pacman.d/mirrorlist
          sed -i 's/^#Color/Color/; s/^#ParallelDownloads/ParallelDownloads/' /mnt/sys-root/etc/pacman.conf
          echo -e "\n[archlinuxcn]\nSigLevel = Never\nServer = https://repo.archlinuxcn.org/\$arch" >> /mnt/sys-root/etc/pacman.conf
          echo -e "\n[blackarch]\nSigLevel = Never\nServer = https://blackarch.org/blackarch/\$repo/os/\$arch" >> /mnt/sys-root/etc/pacman.conf

          awk '/^\[zrepo\]/,/^$/' /mnt/sys-root/etc/pacman.conf > zrepo.conf
          grep -v "^\[zrepo\]" /mnt/sys-root/etc/pacman.conf | grep -v "zenoralinux" > temp.conf
          cat zrepo.conf temp.conf > /mnt/sys-root/etc/pacman.conf
          rm zrepo.conf temp.conf

          echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/sys-root/etc/sudoers.d/wheel
          echo "tmpfs /tmp tmpfs mode=1777,strictatime,nosuid,nodev,size=50%,nr_inodes=1m 0 0" >> /mnt/sys-root/etc/fstab
          echo "PACMAN_IGNORE_LANDLOCK=1" >> /mnt/sys-root/etc/environment
          
          arch-chroot /mnt/sys-root locale-gen
          arch-chroot /mnt/sys-root systemctl mask systemd-binfmt.service systemd-resolved.service systemd-networkd.service tmp.mount

          touch /mnt/sys-root/etc/skel/.zshrc
          cp /etc/pacman.conf /mnt/sys-root/etc/pacman.conf
          cp -r /etc/pacman.d /mnt/sys-root/etc/
          arch-chroot /mnt/sys-root pacman -Sy --noconfirm
          arch-chroot /mnt/sys-root pacman -S --noconfirm zenora-release zenora-fake-apt zenora-back zenora-wsl-zsh-config zenora-conf-update neofetch zsh glibc

          mkdir -p /mnt/sys-root/usr/lib/wsl
          cp zenora.ico /mnt/sys-root/usr/lib/wsl/zenora.ico
          cp wsl-oobe.sh /mnt/sys-root/usr/lib/wsl/oobe.sh
          chmod +x /mnt/sys-root/usr/lib/wsl/oobe.sh
          cp wsl.conf /mnt/sys-root/etc/wsl.conf
          cp wsl-distribution.conf /mnt/sys-root/etc/wsl-distribution.conf
          cp useradd /mnt/sys-root/etc/default/useradd
          tar --numeric-owner -czf install.tar.gz -C /mnt/sys-root ./

      - name: Upload install.tar.gz
        uses: actions/upload-artifact@v4
        with:
          name: install-tar
          path: install.tar.gz

  build-appx:
    name: Build Appx Package
    runs-on: windows-latest
    needs: build-rootfs

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download install.tar.gz
        uses: actions/download-artifact@v4
        with:
          name: install-tar

      - name: Prepare Appx structure
        shell: pwsh
        run: |
          Move-Item install.tar.gz appx\AppxPackage\install.tar.gz
          
      - name: Find Windows SDK tools path
        id: find-sdk
        shell: pwsh
        run: |
          $sdkPath = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Directory |
            Where-Object { Test-Path "$($_.FullName)\MakeAppx.exe" } |
            Sort-Object FullName -Descending |
            Select-Object -First 1
          echo "sdk_bin_path=$($sdkPath.FullName)" >> $env:GITHUB_ENV

      - name: Build .appx package
        shell: pwsh
        run: |
          & "$env:sdk_bin_path\MakeAppx.exe" pack /d appx\AppxPackage /p release\app\Zenora_WSL_1.0.0.0_x64.appx

      - name: Sign the package
        shell: pwsh
        run: |
          & "$env:sdk_bin_path\signtool.exe" sign /fd SHA256 /f appx\certificate.pfx /p zenora1234 release\app\Zenora_WSL_1.0.0.0_x64.appx

      - name: Copy appx folder to target release path
        shell: pwsh
        run: |
          $targetDir = "appx\release"
          if (-not (Test-Path $targetDir)) {
            New-Item -ItemType Directory -Path $targetDir | Out-Null
          }
          Copy-Item "release\*" -Destination $targetDir -Recurse -Force

 
      - name: Zip release folder
        shell: pwsh
        run: |
          Compress-Archive -Path "appx\release" -DestinationPath "zenora-release.zip" -Force

      - name: Upload ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: zenora-release-zip
          path: zenora-release.zip

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-appx
    
    steps:
      - name: Download ZIP Artifact
        uses: actions/download-artifact@v4
        with:
          name: zenora-release-zip

      - name: Create Release with ZIP
        uses: softprops/action-gh-release@v1
        with:
          name: Zenora WSL Release
          tag_name: v1.0.0
          body: |
            Zenora WSL Complete Package
            - Contains all release files in a single ZIP
          files: |
            zenora-release.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
